mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7)      %>% # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE)                                 %>% # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday))               %>% # Reconstruct uniform dates for all rows in each week
mutate(week_DateTot = paste("t", gsub("-", "_", weekDate), sep=""))       %>% # weekDate without "-", with "t" for total cases
mutate(week_DateW = paste("w", gsub("-", "_", weekDate), sep=""))         %>% # weekDate without "-", with "w" for a week of cases
mutate()                                         # pad fips with zeroes
rm(ronaDays)
#weekDates <- distinct(select(ronaTall, weekDate, week_DateTot, week_DateW))      # Put aside weekDates in advance of spread()
# WIDEN FOR COLUMNS OF TIMES ---------------------------------------------------
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_DateTot,
values_from = casesTot)                                       %>%    # Only 1 row/county; 1 col/week. Total cases at each week
left_join(popu, by="fips")                                                %>%
left_join(area, by="fips")                                                %>%
left_join(vote, by="fips")                                                %>%
mutate(fips2 = paste("x", fips, sep = ""))                                %>% # in case I want to save the fips
mutate(fips3 = paste("x", fips, sep = ""))                                %>%
column_to_rownames(var="fips3")
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA ---------------------------------------------------------------------
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)                                  # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# WRITE RAW DATA AS SEPARATE VARIABLES
ronaDays <- rawData[["ronaDays"]]
area <- rawData[["area"]]
popu <- rawData[["popu"]]
vote <- rawData[["vote"]]
rm(rawData)
# DAYS TO WEEKS ----------------------------------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- ronaDays                                                        %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7)      %>% # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE)                                 %>% # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday))               %>% # Reconstruct uniform dates for all rows in each week
mutate(week_DateTot = paste("t", gsub("-", "_", weekDate), sep=""))       %>% # weekDate without "-", with "t" for total cases
mutate(week_DateW = paste("w", gsub("-", "_", weekDate), sep=""))         %>% # weekDate without "-", with "w" for a week of cases
mutate()                                         # pad fips with zeroes
rm(ronaDays)
#weekDates <- distinct(select(ronaTall, weekDate, week_DateTot, week_DateW))      # Put aside weekDates in advance of spread()
# WIDEN FOR COLUMNS OF TIMES ---------------------------------------------------
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_DateTot,
values_from = casesTot)                                           # Only 1 row/county; 1 col/week. Total cases at each week
# REPLACE ALL NA'S WITH ZEROES -------------------------------------------------
ronaWideTot$casesTot2 <- ronaWideTot$casesTot %>% replace_na(casesTot, 0)
ronaWideTot$casesTot
ronaWideTot
area <- fread(pathArea, select = grep(            "fips|mi2",
names("fips"))
area <- fread(pathArea, select = grep(            "fips|mi2",
names("fips")))
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
area <- fread(pathArea, select = grep(            "fips|mi2",
names("fips")))
area
?mutate_at
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA ---------------------------------------------------------------------
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)                                  # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# WRITE RAW DATA AS SEPARATE VARIABLES
ronaDays <- rawData[["ronaDays"]]
area <- rawData[["area"]]
popu <- rawData[["popu"]]
vote <- rawData[["vote"]]
rm(rawData)
# DAYS TO WEEKS ----------------------------------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- ronaDays                                                        %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7)      %>% # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE)                                 %>% # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday))               %>% # Reconstruct uniform dates for all rows in each week
mutate(week_DateTot = paste("t", gsub("-", "_", weekDate), sep=""))       %>% # weekDate without "-", with "t" for total cases
mutate(week_DateW = paste("w", gsub("-", "_", weekDate), sep=""))         %>% # weekDate without "-", with "w" for a week of cases
mutate()                                         # pad fips with zeroes
rm(ronaDays)
#weekDates <- distinct(select(ronaTall, weekDate, week_DateTot, week_DateW))      # Put aside weekDates in advance of spread()
# WIDEN FOR COLUMNS OF TIMES ---------------------------------------------------
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_DateTot,
values_from = casesTot)                                           # Only 1 row/county; 1 col/week. Total cases at each week
# REPLACE ALL NA'S WITH ZEROES -------------------------------------------------
ronaWideTot2 <- ronaWideTot %>%
mutate_at(vars(starts_with("Petal")), funs(Replace15))
replace_na(casesTot, 0)
# JOIN DESCRIPTIVE DATA      ---------------------------------------------------
left_join(popu, by="fips")                                                %>%
left_join(area, by="fips")                                                %>%
left_join(vote, by="fips")                                                %>%
mutate(fips2 = paste("x", fips, sep = ""))                                %>% # in case I want to save the fips
mutate(fips3 = paste("x", fips, sep = ""))                                %>%
column_to_rownames(var="fips3")
# CHECK FOR: NEGATIVE DIFFERENCES FROM WEEK TO WEEK
# https://stackoverflow.com/questions/7735647/replacing-nas-with-latest-non-na-value
rm(area, popu, vote, ronaTall)
# TRANSPOSE, DIFF, TRANSPOSE BACK, JOIN ------------------------ ----------------
# TRANSPOSE
r <- ronaWideTot %>%
select(fips2, starts_with("t")) %>%
pivot_longer(-fips2) %>%
pivot_wider(names_from=fips2, values_from=value) %>%
column_to_rownames(var="name")
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA ---------------------------------------------------------------------
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# WRITE RAW DATA AS SEPARATE VARIABLES
ronaDays <- rawData[["ronaDays"]]
area <- rawData[["area"]]
popu <- rawData[["popu"]]
vote <- rawData[["vote"]]
# DAYS TO WEEKS ----------------------------------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%      # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateW = paste("w", gsub("-", "_", weekDate), sep="")) %>%         # weekDate without "-", with "w" for "week number"
# pad fips with zeroes
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA ---------------------------------------------------------------------
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# WRITE RAW DATA AS SEPARATE VARIABLES
ronaDays <- rawData[["ronaDays"]]
area <- rawData[["area"]]
popu <- rawData[["popu"]]
vote <- rawData[["vote"]]
# DAYS TO WEEKS ----------------------------------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%      # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateW = paste("w", gsub("-", "_", weekDate), sep=""))             # weekDate without "-", with "w" for "week number"
# pad fips with zeroes
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA ---------------------------------------------------------------------
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS ----------------------------------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%      # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateW = paste("w", gsub("-", "_", weekDate), sep=""))             # weekDate without "-", with "w" for "week number"
# pad fips with zeroes
# WIDEN FOR COLUMNS OF TIMES ---------------------------------------------------
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_DateTot,
values_from = casesTot)                                           # Only 1 row/county; 1 col/week. Total cases at each week
# WIDEN FOR COLUMNS OF TIMES ---------------------------------------------------
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_Date,
values_from = casesTot)                                           # Only 1 row/county; 1 col/week. Total cases at each week
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%      # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_Date = paste("w", gsub("-", "_", weekDate), sep=""))             # weekDate without "-", with "w" for "week number"
# WIDEN FOR COLUMNS OF TIMES ---------------------------------------------------
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_Date,
values_from = casesTot)                                           # Only 1 row/county; 1 col/week. Total cases at each week
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA ---------------------------------------------------------------------
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS ----------------------------------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%      # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_Date = paste("w", gsub("-", "_", weekDate), sep=""))             # weekDate without "-", with "w" for "week number"
# pad fips with zeroes
# TIDY: WIDEN, NA'S-TO-ZEROES, JOIN --------------------------------------------
# WIDEN FOR COLUMNS OF TIMES
ronaWideTot <- ronaTall                                                     %>%
pivot_wider(id_cols = fips, names_from = week_Date,
values_from = casesTot)                                           # Only 1 row/county; 1 col/week. Total cases at each week
str(ronaWideTot)
ronaWideTot
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/bhack/nlyz/ronaVote/wrkdir")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/bhack/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/bhack/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/bhack/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/bhack/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%      # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_Date = paste("w", gsub("-", "_", weekDate), sep=""))              # weekDate for row/colnames: with _ instead of -, +prefix "w" for "week number"
# later: pad fips with zeroes
# TIDY: WIDEN, NA'S-TO-ZEROES, JOIN --------------------------------------------
# WIDEN FOR COLUMNS OF TIMES
ronaWideTot <- ronaTall  %>%
pivot_wider(id_cols = fips, names_from = week_Date, values_from = casesTot)   # Only 1 row/county; 1 col/week. Total cases at each week
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w")), replace_na(0))
ronaWideTot
ronaWideTot2
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w")), replace_na(casesTot, 0))
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w")), replace_na(., casesTot, 0))
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w"), replace_na(., casesTot, 0)))
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w"), replace_na(., casesTot, 0)))
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w"), replace_na(casesTot, 0)))
ronaWideTot %>% replace_na(casesTot, 0)
ronaWideTot %>% replace_na(0)
ronaWideTot %>% replace_na(0, replace = TRUE)
ronaWideTot
ronaWideTot %>% replace_na(0, w2020_01_26 = 0)
ronaWideTot %>% replace_na(0, "w2020_01_26" = 0)
ronaWideTot %>% replace_na("w2020_01_26" = 0)
ronaWideTot %>% replace_na(w2020_01_26 = 0)
?replace_na
ronaWideTot %>% replace_na(., w2020_01_26 = 0)
ronaWideTot %>% replace_na(., list(w2020_01_26 = 0))
ronaWideTot %>% replace_na(., everything())
ronaWideTot %>% replace_na(., select(everything()))
ronaWideTot %>% replace_na(., list(#list of columns))
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w"), replace_na(casesTot, 0)))
xy <- data.frame(v1 = c(1, 2, 3), v2 = c(11, 12,13))
xy
mutate(xy, rn = c("r1", "r2", "r3"))
column_to_rownames(xy. var = "rn")
column_to_rownames(xy, var = "rn")
column_to_rownames(xy, var = "rn")
?column_to_rownames
column_to_rownames(xy, var = "rn")
xy
xy <- mutate(xy, rn = c("r1", "r2", "r3"))
column_to_rownames(xy, var = "rn")
xy <- column_to_rownames(xy, var = "rn")
xy
xy <- data.frame(v1 = c(1,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn")
xy
str(ronaWideTot)
xy
xy %>% across()
xy %>% print(across())
xy %>% mutate(across())
xy %>% mutate(across(ends_with("2")))
xy %>% mutate(across(ends_with("2", .+1)))
xy %>% mutate(across(ends_with("2", +1)))
xy %>% mutate(across(ends_with("2", +1)))
xy %>% mutate(across(ends_with("2", function(x) {x+1})
xy %>% mutate(across(ends_with("2", function(x) {x+1})))
xy %>% mutate(across(ends_with("2", function(x) {x+1})))
xy %>% mutate(across(ends_with("2", function(x) {x+1})))
function(x) {x+1}
q <- function(x) {x+1}
q(5)
qw(5)
qw <- function(x) {x+1}
qw(5)
xy %>% mutate(across(ends_with("2", function(x) {x+1})))
increment
?increment
?across
xy %>% mutate(across(ends_with("2"), function(x) {x+1}))
xy <- data.frame(v1 = c(1,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(ends_with("2"), function(x) {x+1}))
xy <- data.frame(v1 = c(1,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(ends_with("2"), function(x) {x+1})) %>%
print()
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(starts_with("w"), replace_na(0)))
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(replace_na(0)))
ronaWideTot
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(replace_na(0))) %>%
print()
?replace_na
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(replace_na(0)) %>%
print()
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(replace_na(0))) %>%
print()
xy <- data.frame(v1 = c(NA,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(ends_with("2"), function(x) {x+1})) %>%
print()
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(function(x) {x+1000})) %>% # replace_na(0)
print()
ronaWideTot2 <- ronaWideTot %>%
# REPLACE ALL NA'S WITH ZEROES
ronaWideTot2 <- ronaWideTot %>%
mutate(across(function(x) {x+1000})) %>% # replace_na(0)
print()
xy <- data.frame(v1 = c(NA,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(function(x) {x+1})) %>%  # ends_with("2"),
print()
xy <- data.frame(v1 = c(NA,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(everything(), function(x) {x+1})) %>%  # ends_with("2"),
print()
xy <- data.frame(v1 = c(NA,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(everything(), replace_na(0))) %>%
print()
xy <- data.frame(v1 = c(NA,2,3), v2 = c(11,12,13)) %>%
mutate(rn = c("r1", "r2", "r3")) %>%
column_to_rownames(var = "rn") %>%
mutate(across(everything(), function(x) {x+1})) %>%   # replace_na(0)
print()
