# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%                # Make cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} ))
# REGRESS ----------------------------------------------------------------------
lm_allT <- map(select(rona, starts_with("T")),
function(yvar) {
return( lm(yvar ~ margin2020, rona) )
})
l <- length(rona)
lm_allW <- map(select(rona[2:l], starts_with("W")),
function(yvar) {
return( lm(yvar ~ margin2020, rona) )
})
# GET REGRESSION OUTPUT --------------------------------------------------------
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
lm_outW <- map(lm_allW,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
# ===============================================================================================
# CURRENT FRONTIER
# ===============================================================================================
# PROCESS REGRESSION OUTPUT ----------------------------------------------------
lm_dfT = as.data.frame(do.call(rbind, lm_outT))                                 # Data frame of Total Cases
colnames(lm_dfT) <- c("TrumpCountiesMoreCovid", "RSquared", "PValue")
lm_dfT2 = rownames_to_column(lm_dfT, var = "week_DateT")
lm_dfT2 <- left_join(lm_dfT2, weekDates, by = "week_DateT")
lm_dfW = as.data.frame(do.call(rbind, lm_outW))
colnames(lm_dfW) <- c("TrumpCountiesMoreCovid", "RSquared", "PValue")
lm_dfW2 = rownames_to_column(lm_dfW, var = "week_DateW")
lm_dfW2 <- left_join(lm_dfW2, weekDates, by = "week_DateW")
lm_dfT2 <- filter(lm_dfT2, weekDate > as.Date("2020-04-12"))
lm_dfW2 <- filter(lm_dfT2, weekDate > as.Date("2020-04-12"))
lm_dfT2 %>% ggplot(aes(x=weekDate, y=TrumpCountiesMoreCovid)) + geom_point()
rm(lm*)
rm(lm.)
rm(.)
rm()
ls
grep("^[Bb]", names(df), value=TRUE)
grep("^lm", names(df), value=TRUE)
grep("^[l]", names(df), value=TRUE)
grep("^[l]", names(df), value=TRUE) %>% print
grep("^[l]", names(df), value=TRUE) %>% print()
grep("^[l]", names(df), value=TRUE)
grep("^l", names(df), value=TRUE)
grep("^l", value=TRUE)
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%                # Make cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} ))
str(rona)
?ntile
rona$quartiles <- ntile(rona$pop2019, 4)
rona$quartiles
map(select(rona, starts_with("T")), median)
str(map(select(rona, starts_with("T")), median))
rona$T2020_05_24
median(rona$T2020_05_24)
?median
rona$T2020_05_24[883]
rona$T2020_05_24[882]
rona$T2020_05_24[883]
rona$county_name[883]
str(rona)
?str
str(rona, list.len = inf)
str(rona, list.len = 5000)
rona$area_name[883]
rona$area_name[882]
rona$area_name[883]
rona[883]
view(rona, 883)
print(rona[883])
print(rona[,883])
rona[883,]
rona[883,]
rona[fips == 51700]
filter(rona, fips = 51700)
filter(rona, fips == 51700)
filter(rona, T2020_12_27 == NA)
filter(rona, T2020_12_27 == NA)$area_name
filter(rona, T2020_12_27 == 5)
filter(rona, T2020_12_27 < 1)
filter(rona, fips == 51700)
filter(rona, T2020_12_27  == NA)
filter(rona, is.na(T2020_12_27))
filter(rona, pop2019 == NA)
filter(rona, is.na(pop2019))
# REMOVE OBSERVATIONS WITH pop2019 == NA
rona <- rona %>% filter(is.na(pop2019))
# REMOVE OBSERVATIONS WITH pop2019 == NA
ronaAllSections <- ronaAllSections %>% filter(is.na(pop2019))
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%         # Make total cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} ))         # "    (weekly new cases)  "     "      "
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# REMOVE OBSERVATIONS WITH pop2019 == NA
ronaAllSections <- ronaAllSections %>% filter(is.na(pop2019))
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%         # Make total cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} ))         # "    (weekly new cases)  "     "      "
#%>%   # number quartiles
# number population-weighted quartiles
